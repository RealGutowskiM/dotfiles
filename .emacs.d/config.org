* Visual Tweaks
** disable gui noise
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  #+END_SRC
** transparency for terminal emacs
  #+BEGIN_SRC emacs-lisp
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))
  (add-hook 'window-setup-hook 'on-after-init)
  #+END_SRC 
** relative line numbers (disable)
  #+BEGIN_SRC emacs-lisp
    ;; (global-display-line-numbers-mode t)
    ;; (setq display-line-numbers-type 'relative)
  #+END_SRC
** window margins
   #+BEGIN_SRC emacs-lisp
     (setq-default left-margin-width 2 right-margin-width 2)
   #+END_SRC
** scroll margin
  #+BEGIN_SRC emacs-lisp
  (setq scroll-margin 10
        scroll-conservatively 100)
  #+END_SRC
** line highlighting for GUI Emacs
  #+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  #+END_SRC
** prettyfy symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
* Misc fixes
** disable bell noise
  #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  #+END_SRC
** disable size indication mode
   #+BEGIN_SRC emacs-lisp
     (size-indication-mode -1)
   #+END_SRC
** disable autosave/backups
  #+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  #+END_SRC
** substitute yes-or-no prompts with shorter y-or-n
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** disable startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** follow symbolic links
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC
** edit org src in same buffer
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC
** move in subwords
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode t)
   #+END_SRC
** electric pairs
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
                                 (?\( . ?\))
                                 (?\[ . ?\])
                                 ))
     (electric-pair-mode t)
   #+END_SRC
** Use spaces instead of tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** Highlight tabs
   #+BEGIN_SRC emacs-lisp
     (setq whitespace-style '(tab-mark))
     (global-whitespace-mode 1)
   #+END_SRC
** set default browser
   #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "qutebrowser")
   #+END_SRC
* Config
** edit
   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+END_SRC
** reload
   #+BEGIN_SRC emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Dracula theme
   #+BEGIN_SRC emacs-lisp
   (use-package dracula-theme
                :ensure t
                :demand
                :config
                (load-theme 'dracula t))
   #+END_SRC
* which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
                :ensure t
                :init
                (which-key-mode))
   #+END_SRC
* beacon
   #+BEGIN_SRC emacs-lisp
   (use-package beacon
                :ensure t
                :init
                (beacon-mode t))
   #+END_SRC
* evil
** install
   #+BEGIN_SRC emacs-lisp
     (use-package evil
                  :ensure t
                  :init
                  (evil-mode t)
                  :config
                  (setq evil-normal-state-tag "Normal")
                  (setq evil-insert-state-tag "Insert")
                  (setq evil-visual-state-tag "Visual"))
   #+END_SRC
** Change cursor depending on the state
   #+BEGIN_SRC emacs-lisp
     (setq evil-mode-line-format nil
           evil-normal-state-cursor '(box "#bd93f9")
           evil-insert-state-cursor '(bar "#50fa7b")
           evil-visual-state-cursor '(box "#f1fa8c"))
   #+END_SRC
* evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
                  :ensure t
                  :init
                  (global-evil-leader-mode t)
                  (evil-leader/set-leader ","))
   #+END_SRC
* org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
* IDO
** enable IDO
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode t)
   #+END_SRC
** ido-vertical
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode t))
   #+END_SRC
** smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind ("M-x" . smex))
   #+END_SRC
** switch buffers
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+END_SRC
* Buffers
** enable ibuffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC
** use vim keys in ibuffer
   #+BEGIN_SRC emacs-lisp
     (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))  
   #+END_SRC
** buffer shortcuts
  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-key "b l" 'evil-next-buffer)
    (evil-leader/set-key "b h" 'evil-prev-buffer)
    (evil-leader/set-key "b b" 'ido-switch-buffer)
  #+END_SRC 
* Sudo edit
  #+BEGIN_SRC emacs-lisp
    (use-package sudo-edit
      :ensure t)
  #+END_SRC
* Colors
** rainbow
   #+BEGIN_SRC emacs-lisp
         (use-package rainbow-mode
           :ensure t
           :config
           (add-hook 'prog-mode-hook 'rainbow-mode))
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
* Custom keybinding
** Move page up
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-u") 'evil-scroll-up)
   #+END_SRC
* Shell
** set default shell
   #+BEGIN_SRC emacs-lisp
     (defvar my-default-term-shell "/bin/zsh")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-default-term-shell)))
     (ad-activate 'ansi-term)
   #+END_SRC
** keybinding for terminal
   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-key "t" 'ansi-term)
   #+END_SRC
* Org snippets
** ELisp code snippet
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
                  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC
* Projectile
** install and bind
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (evil-leader/set-key "p" 'projectile-command-map)
       (projectile-mode 1))
   #+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "Hi, how are you?"))
#+END_SRC
* Modeline
** all-the-icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
** modeline
   #+BEGIN_SRC emacs-lisp
     (setq-default mode-line-format
                   '("%e"
                     " "
                     mode-line-buffer-identification
                     ":%l:%c: %p"
                     (vc-mode (
                               "    "
                               (:eval (if (display-graphic-p)
                                          (all-the-icons-faicon "code-fork"
                                                  :v-adjust 0)))
                               vc-mode))
                     "    "
                     mode-line-modes
                     mode-line-misc-info
                     mode-line-end-spaces))
   #+END_SRC
** diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'subword-mode)
       (diminish 'rainbow-mode)
       (diminish 'undo-tree-mode)
       (diminish 'which-key-mode))
   #+END_SRC
* Magit
** install
  #+BEGIN_SRC emacs-lisp
        (use-package magit
          :ensure t
          :config
          (evil-leader/set-key "g" 'magit-status))
  #+END_SRC
** evil keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :ensure t)
   #+END_SRC
* Auto-completion
** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       :config
       (setq company-idle-delay 0.25))
   #+END_SRC
* Snippets
** yasnippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (use-package yasnippet-snippets
         :ensure t)
       (yas-reload-all)
       (yas-global-mode t))
   #+END_SRC
* Web-mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :mode
      (".html?")
      :config
      (setq
       web-mode-markup-indent-offset 2
       web-mode-css-indent-offset 2
       web-mode-enable-auto-closing t
       web-mode-enable-auto-opening t
       web-mode-enable-auto-pairing t
       web-mode-enable-auto-indentation t))
  #+END_SRC
* JSON
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t)
  #+END_SRC
* FlyCheck
** install
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC
* JavaScript
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :mode "\\.js\\'"
       :interpreter "node"
       :config
       (setq-default js2-basic-offset 2))
   #+END_SRC
* TypeScript
** tide
   #+BEGIN_SRC emacs-lisp
     (defun setup-tide-mode ()
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (tide-hl-identifier-mode +1)
       (company-mode +1))

     (use-package tide
       :ensure t
       :config
       (progn
         (setq company-tooltip-align-annotations t)
         (setq tide-format-options '(:indentSize 2 :tabSize 2))
         (setq-default typescript-indent-level 2)
         (add-hook 'typescript-mode-hook #'setup-tide-mode)
         (add-hook 'js2-mode-hook #'setup-tide-mode)))
   #+END_SRC
* Python
** company-jedi
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook 'jedi:setup)
       (add-to-list 'company-backends 'company-jedi))
   #+END_SRC
