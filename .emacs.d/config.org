* Visual Tweaks
** disable gui noise
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  #+END_SRC
** transparency for terminal emacs
  #+BEGIN_SRC emacs-lisp
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))
  (add-hook 'window-setup-hook 'on-after-init)
  #+END_SRC 
** relative line numbers
  #+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  #+END_SRC
** scroll margin
  #+BEGIN_SRC emacs-lisp
  (setq scroll-margin 10
        scroll-conservatively 100)
  #+END_SRC
** line highlighting for GUI Emacs
  #+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  #+END_SRC
** prettyfy symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
* Misc fixes
** disable bell noise
  #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  #+END_SRC
** disable autosave/backups
  #+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  #+END_SRC
** substitute yes-or-no prompts with shorter y-or-n
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** disable startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** follow symbolic links
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC
** edit org src in same buffer
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC
** move in subwords
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode t)
   #+END_SRC
** electric pairs
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 ))
     (electric-pair-mode t)
   #+END_SRC
* Config
** edit
   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+END_SRC
** reload
   #+BEGIN_SRC emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Dracula theme
   #+BEGIN_SRC emacs-lisp
   (use-package dracula-theme
                :ensure t
                :demand
                :config
                (load-theme 'dracula t))
   #+END_SRC
* which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
                :ensure t
                :init
                (which-key-mode))
   #+END_SRC
* beacon
   #+BEGIN_SRC emacs-lisp
   (use-package beacon
                :ensure t
                :init
                (beacon-mode t))
   #+END_SRC
* evil
   #+BEGIN_SRC emacs-lisp
   (use-package evil
                :ensure t
                :init
                (evil-mode t))
   #+END_SRC
* evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
		  :ensure t
		  :init
		  (global-evil-leader-mode t)
		  (evil-leader/set-leader ","))
   #+END_SRC
* org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
* IDO
** enable IDO
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode t)
   #+END_SRC
** ido-vertical
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode t))
   #+END_SRC
** smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind ("M-x" . smex))
   #+END_SRC
** switch buffers
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+END_SRC
* Buffers
** enable ibuffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC
** use vim keys in ibuffer
   #+BEGIN_SRC emacs-lisp
     (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))  
   #+END_SRC
* Sudo edit
  #+BEGIN_SRC emacs-lisp
    (use-package sudo-edit
      :ensure t)
  #+END_SRC
* Colors
** rainbow
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init (rainbow-mode t))
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
* Custom keybinding
** Move page up
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-u") 'evil-scroll-up)
   #+END_SRC
* Org snippets
** ELisp code snippet
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
		  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Hi, how are you?"))
#+END_SRC
* Powerline
** powerline
   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :init
       (powerline-default-theme))
   #+END_SRC
** diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'subword-mode)
       (diminish 'rainbow-mode)
       (diminish 'undo-tree-mode)
       (diminish 'which-key-mode))
   #+END_SRC
* Auto-completion
** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC

